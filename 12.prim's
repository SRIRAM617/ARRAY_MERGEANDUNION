#include<iostream>
#define I INT_MAX
using namespace std;

int mini=I;


int cost[8][8]={{I,I,I,I,I,I,I,I},{I,I,25,I,I,I,5,I},
{I,25,I,12,I,I,I,10},{I,I,12,I,8,I,I,I},
                {I,I,I,8,I,16,I,14},{I,I,I,I,16,I,20,18},
                {I,5,I,I,I,20,I,I},{I,I,10,I,14,18,I,I}};
int near[8]={I,I,I,I,I,I,I,I};
int result[2][6];

int i,j,k,l,m,u,v,point;

int n;


int main()
{

    for(i=1;i<8;i++)
    {
        for(j=i+1;j<8;j++)
        {
            if(cost[i][j]<mini)
            {mini=cost[i][j];
             u=i;
             v=j;
            }
        }

    }
    result[0][0]=u;
    result[1][0]=v;
    near[u]=0;
    near[v]=0;

    for(k=1;k<=7;k++)
    {

         if(near[k]!=0)
         {


            if(cost[k][u]< cost[k][v])
            {
                near[k]=u;
            }
            else
            {
                near[k]=v;
            }
         }

    }
    for(l=1;l<6;l++)
    {
        int mini1=I;

            for(m=1;m<=7;m++)
            {
                if(near[m]!=0 && cost[m][near[m]] < mini1)
                {
                    point=m;
                    mini1=cost[m][near[m]];

                }

            }

            result[0][l]=point;
            result[1][l]=near[point];
            near[point]=0;

           for(n=1;n<8;n++)
           {
               if(near[n]!=0 && cost[n][point]<cost[n][near[n]])
               {
                   near[n]=point;
               }
           }

    }

  for(int rex=0;rex<=1;rex++)
  {
      for(int rey=0;rey<=5;rey++)
      {
          cout<<result[rex][rey]<<" ";
      }
      cout<<endl;
  }


    return 0;
}
