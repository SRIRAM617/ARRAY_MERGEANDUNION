#include<iostream>
using namespace std;
class Array
{
private:
    int *A;

    int sizee;
    int length;
public:
    Array(int sizee)
    {
        this->sizee=sizee;
        A=new int[sizee];
    }
    void create()
    {
        cout<<"Enter the length of the array"<<endl;
        cin>>length;
        cout<<"Enter the elements of the array"<<endl;
        for(int i=0;i<length;i++)
        {
            cin>>A[i];
        }
    }
    void display()
    {
        for(int i=0;i<length;i++)
        {
            cout<<A[i]<<" ";
        }
    }
    void add(int element)
    {
        if(length==sizee)
        {
            cout<<"Array is full"<<endl;
        }
        else
        {
            A[length]=element;
            length++;
        }
    }
    void insertt(int index,int element)
    {
        int i;
        if(length==sizee)
        {
            cout<<"Array is full"<<endl;
        }
        else if(index>0&&index<=sizee)
        {
          for(i=length;i>index;i--)
          {
              A[i]=A[i-1];
          }
          A[i]=element;
          length++;
        }
    }
    void deletee(int index)
    {
        int element=A[index];
        for(int i=index;i<length-1;i++)
        {
            A[i]=A[i+1];
        }
        length--;

    }
    ~Array()
    {
        delete[] A;
        cout<<endl;
        cout<<"Array destroyed"<<endl;
    }
    int lsearch(int element)
    {
        for(int i=0;i<length;i++)
        {
            if(element==A[i])
            {
                return i;
            }

        }

                return -1;

    }
    void swapp(int &x,int &y)
    {
        int temp;
        temp=y;
        y=x;
        x=temp;
    }
     int lsearchtrans(int element)
    {
        for(int i=0;i<length;i++)
        {
            if(element==A[i])
            {
                swapp(A[i],A[i-1]);
                /*
                   In move to head use the swapp(A[0],A[i]);
                */
                return i-1;
            }

        }

                return -1;

    }
    int get(int index)
    {
        if(index>=0&&index<length)
            return A[index];
        return -1;
    }
    void sett(int index,int element)
    {
        if(index>=0&&index<length)
        {
            A[index]=element;
        }
    }
    int maxx()
    {
        int ma=A[0];
        for(int i=1;i<length;i++)
        {
            if(A[i]>ma)
            {
                ma=A[i];
            }
        }
        return ma;
    }
    int minn()
    {
        int mi=A[0];
        for(int i=1;i<length;i++)
        {
            if(A[i]<mi)
            {
                mi=A[i];
            }
        }
        return mi;
    }
    int sum()
    {
        int total=0;
        for(int i=0;i<length;i++)
            total+=A[i];
        return total;
    }
    int avg()
    {
        int total=0;
        for(int i=0;i<length;i++)
            total+=A[i];
        return total/length;
    }
    void ReverseUsingAux()
    {
          int B[10];
          for(int i=0,j=length-1;j>=0;i++,j--)
          {
              B[i]=A[j];
          }
          for(int i=0;i<length;i++)
          {
              A[i]=B[i];
          }
    }
    void ReverseUsingSwap()
    {
        for(int i=0,j=length-1;i<j;i++,j--)
        {
            swapp(A[i],A[j]);
        }
    }
    int leftshift()
    {
        int lvalue=A[0];
        for(int i=1;i<length;i++)
        {
            A[i-1]=A[i];
        }
        return lvalue;
    }
    void leftrotate()
    {

        int lvalue=A[0],i;
        for(i=1;i<length;i++)
        {
            A[i-1]=A[i];
        }
        A[i-1]=lvalue;
    }
    int rightshift()
    {
        int rvalue=A[length-1];
        return rvalue;
    }
    void rightrotate()
    {
        int rvalue=A[length-1],i;
        for(i=length-1;i>0;i--)
        {
            A[i]=A[i-1];
        }
        A[i]=rvalue;
    }
    void insertsorted(int element)
    {
        int i=length-1;
        while(A[i]>element)
        {
            A[i+1]=A[i];
            i--;
        }
        A[i+1]=element;
    }
    int isSorted()
    {
        for(int i=0;i<=length-2;i++)
        {
            if(A[i]>A[i+1])
                return -1;

        }
        return 0;
    }
    void negativeLeftSide()
    {
        int i;
        int j;
        i=0;
        j=length-1;
        while(i<j)
        {
        while(A[i]<0)i++;
        while(A[j]>=0)j--;
        if(i<j)
        {
         swapp(A[i],A[j]);
        }
        }

    }

};
int main()
{
    Array arr(10);

    arr.create();

    arr.negativeLeftSide();
    arr.display();


    return 0;
}
